#include <stdio.h>

typedef struct {
    unsigned int capacity;
    unsigned int size;

    int* items;
} Dray;

void append(Dray *arr, int num) { 
    assert(arr->size <= arr->capacity);

    if (arr->size == arr->capacity) {
        int new_size = arr->capacity * 2;
		if (arr->capacity == 0) {
			new_size = 256;
		}
        int *new_start = realloc(arr->items, new_size * sizeof(int));

        if (new_start == NULL) {
            perror("Failed to reallocate memory");
            free(arr->items);
            exit(1);
        }

        arr->items = new_start;
        arr->capacity = new_size;
    }

	arr->items[arr->size] = num;
    arr->size++;
}

Dray construct(unsigned int size) {
    Dray arr;
    arr.capacity = size;
    arr.size = 0;
    arr.items = malloc(size * sizeof(int));

    if (arr.items == NULL) {
        perror("Failed to allocate memory");
        free(arr.items);
        exit(1);
    }

    return arr;
}

enum OPs {
    PUSH,
    PLUS,
    DUMP
};

Dray arr = construct(1);

int main(int argc, char** argv) {
    if (argc < 2) {
        printf("USAGE: stenga [sub-command]");
        return 1;
    }

    return 0;
}
